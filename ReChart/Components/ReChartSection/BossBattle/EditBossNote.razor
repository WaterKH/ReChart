@using MoMMusicAnalysis.Song;
@using MoMMusicAnalysis.Song.BossBattle;
@using ReChart.Interfaces;

@inject IBossChartService BossChartService


<div class="simple-form">

    <div class="form-group" style="padding: 5px;">
        <label for="note-time-value"><b>Time (in ms):</b></label>
        <input type="text" class="form-control" id="note-time-value" style="width: 15%; text-align: right; display: inline;" @bind-value="@this.BossNoteCopy.HitTime" />
    </div>

    <div class="form-group" style="padding: 5px;">
        <label for="note-lane"><b>Lane:</b></label>
        <select class="form-select" aria-label="note-lane" style="display: inline; width: 25%" @bind="this.BossNoteCopy.Lane">
            <option selected>Select Lane...</option>
            @foreach (BossLane lane in Enum.GetValues(typeof(BossLane)))
            {
                <option value="@lane">@lane.ToString()</option>
            }
        </select>
    </div>

    <div class="form-group" style="padding: 5px;">
        <label for="note-model-value"><b>Model:</b></label>
        <NoteChoices Type="BossNote" ImageTypes="@this.AllNoteTypes" @bind-ActiveNote="@this.SelectedNoteType" SelectedNoteTypeChanged="SelectedNoteTypeChanged" />
    </div>

    @if (this.SelectedNoteType == "HoldStart")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-previous"><b>Hold End Note:</b></label>
            <select class="form-select" aria-label="note-previous" style="display: inline; width: auto" @bind="this.BossNoteCopy.EndHoldNoteIndex">
                <option value="@(-1)" selected>---</option>
                @foreach (var note in this.EndHoldNotes)
                {
                    <option value="@(this.BossChartService.GetNoteIndex(this.Difficulty, note))">Boss Note ~ HitTime: @note.HitTime.ToString() - Lane: @note.Lane.ToString()</option>
                }
            </select>
        </div>
    }
    else if (this.SelectedNoteType == "HoldEnd")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-shooter"><b>Hold Start Note:</b></label>
            <select class="form-select" aria-label="note-shooter" style="display: inline; width: auto" @bind="this.BossNoteCopy.StartHoldNoteIndex">
                <option value="@(-1)" selected>---</option>
                @foreach (var note in this.StartHoldNotes)
                {
                    <option value="@(this.BossChartService.GetNoteIndex(this.Difficulty, note))">Boss Note ~ HitTime: @note.HitTime.ToString() - Lane: @note.Lane.ToString()</option>
                }
            </select>
        </div>
    }
    else if (this.SelectedNoteType == "Swipe")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-model-value"><b>Swipe Direction:</b></label>
            <NoteChoices Type="SwipeDirection" ImageTypes="@this.SwipeDirections" @bind-ActiveNote="@this.SelectedSwipeDirection" SelectedNoteTypeChanged="SelectedSwipeDirectionChanged" />
        </div>
    }

    <br />
    <br />
    <button @onclick="SaveBossNote" class="btn btn-primary">Save</button>
    <button @onclick="DeleteBossNote" class="btn btn-danger">Delete</button>
    <button @onclick="@(async () => await this.ModalInstance.CancelAsync())" class="btn btn-secondary" style="float: right;">Cancel</button>
</div>


@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public int BossNoteId { get; set; }
    [Parameter] public Dictionary<string, string> AllNoteTypes { get; set; }
    [Parameter] public Dictionary<string, string> SwipeDirections { get; set; }
    [Parameter] public Difficulty Difficulty { get; set; }

    public BossNote BossNote;
    private BossNote BossNoteCopy { get; set; }

    private string SelectedNoteType { get; set; }
    private string SelectedSwipeDirection { get; set; }

    List<BossNote> StartHoldNotes { get; set; } = new List<BossNote>();
    List<BossNote> EndHoldNotes { get; set; } = new List<BossNote>();

    protected override void OnInitialized()
    {
        this.BossNote = this.BossChartService.LoadBossNote(this.Difficulty, this.BossNoteId);
        this.BossNoteCopy = this.BossNote.Copy();

        this.SelectedNoteType = this.BossNote.BossNoteType.ToString();

        this.BossNoteCopyChanged();
    }

    private async Task SaveBossNote()
    {
        this.BossChartService.SaveBossNote(this.Difficulty, ref this.BossNote, this.BossNoteCopy);

        await this.ModalInstance.CloseAsync(ModalResult.Ok<BossNote>(this.BossNote));
    }

    private async Task DeleteBossNote()
    {
        this.BossChartService.RemoveBossNote(this.Difficulty, this.BossNoteId);

        await this.ModalInstance.CloseAsync(ModalResult.Ok("Deleted"));
    }

    private void SelectedNoteTypeChanged(string selectNoteType)
    {
        this.SelectedNoteType = selectNoteType;

        var modelType = Enum.Parse<BossNoteType>(selectNoteType);

        this.BossNoteCopyChanged();

        this.BossNoteCopy.BossNoteType = modelType;
    }

    private void SelectedSwipeDirectionChanged(string selectSwipeDirection)
    {
        this.SelectedSwipeDirection = selectSwipeDirection;

        var swipeDirection = Enum.Parse<SwipeType>(selectSwipeDirection);

        this.BossNoteCopy.SwipeDirection = swipeDirection;
    }

    private void BossNoteCopyChanged()
    {
        if (this.SelectedNoteType == "HoldStart")
            this.EndHoldNotes = this.BossChartService.GetBossNotes(this.Difficulty).Where(x => x.BossNoteType == BossNoteType.HoldEnd).Where(x => x.HitTime > this.BossNoteCopy.HitTime).ToList();
        else if (this.SelectedNoteType == "HoldEnd")
            this.StartHoldNotes = this.BossChartService.GetBossNotes(this.Difficulty).Where(x => x.BossNoteType == BossNoteType.HoldStart).Where(x => x.HitTime < this.BossNoteCopy.HitTime).ToList();
    }
}