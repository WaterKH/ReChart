@using MoMMusicAnalysis;
@using ReChart.Interfaces;

@inject IMemoryChartService MemoryChartService


<div class="simple-form">

    <div class="form-group" style="padding: 5px;">
        <label for="note-time-value"><b>Time (in ms):</b></label>
        <input type="text" class="form-control" id="note-time-value" style="width: 15%; text-align: right; display: inline;" @bind-value="@this.MemoryNoteCopy.HitTime" />
    </div>

    <div class="form-group" style="padding: 5px;">
        <label for="note-lane"><b>Lane:</b></label>
        <select class="form-select" aria-label="note-lane" style="display: inline; width: 25%" @bind="this.MemoryNoteCopy.Lane">
            <option selected>Select Lane...</option>
            @foreach (MemoryLane lane in Enum.GetValues(typeof(MemoryLane)))
            {
                <option value="@lane">@lane.ToString()</option>
            }
        </select>
    </div>

    <div class="form-group" style="padding: 5px;">
        <label for="note-model-value"><b>Model:</b></label>
        <NoteChoices Type="MemoryNote" ImageTypes="@this.AllNoteTypes" @bind-ActiveNote="@this.SelectedNoteType" SelectedNoteTypeChanged="SelectedNoteTypeChanged" />
    </div>

    @if (this.SelectedNoteType == "HoldStart")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-previous"><b>Hold End Note:</b></label>
            <select class="form-select" aria-label="note-previous" style="display: inline; width: auto" @bind="this.MemoryNoteCopy.EndHoldNoteIndex">
                <option value="@(-1)" selected>---</option>
                @foreach (var note in this.EndHoldNotes)
                {
                    <option value="@(this.MemoryChartService.GetNoteIndex(this.Difficulty, note))">Memory Note ~ HitTime: @note.HitTime.ToString() - Lane: @note.Lane.ToString()</option>
                }
            </select>
        </div>
    }
    else if (this.SelectedNoteType == "HoldEnd")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-shooter"><b>Hold Start Note:</b></label>
            <select class="form-select" aria-label="note-shooter" style="display: inline; width: auto" @bind="this.MemoryNoteCopy.StartHoldNoteIndex">
                <option value="@(-1)" selected>---</option>
                @foreach (var note in this.StartHoldNotes)
                {
                    <option value="@(this.MemoryChartService.GetNoteIndex(this.Difficulty, note))">Memory Note ~ HitTime: @note.HitTime.ToString() - Lane: @note.Lane.ToString()</option>
                }
            </select>
        </div>
    }
    else if (this.SelectedNoteType == "Swipe")
    {
        <div class="form-group" style="padding: 5px;">
            <label for="note-model-value"><b>Swipe Direction:</b></label>
            <NoteChoices Type="SwipeDirection" ImageTypes="@this.SwipeDirections" @bind-ActiveNote="@this.SelectedSwipeDirection" SelectedNoteTypeChanged="SelectedSwipeDirectionChanged" />
        </div>
    }

    <br />
    <br />
    <button @onclick="SaveMemoryNote" class="btn btn-primary">Save</button>
    <button @onclick="DeleteMemoryNote" class="btn btn-danger">Delete</button>
    <button @onclick="@(async () => await this.ModalInstance.CancelAsync())" class="btn btn-secondary" style="float: right;">Cancel</button>
</div>
    

@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public int MemoryNoteId { get; set; }
    [Parameter] public Dictionary<string, string> AllNoteTypes { get; set; }
    [Parameter] public Dictionary<string, string> SwipeDirections { get; set; }
    [Parameter] public Difficulty Difficulty { get; set; }

    public MemoryNote MemoryNote;
    private MemoryNote MemoryNoteCopy { get; set; }

    private string SelectedNoteType { get; set; }
    private string SelectedSwipeDirection { get; set; }

    List<MemoryNote> StartHoldNotes { get; set; } = new List<MemoryNote>();
    List<MemoryNote> EndHoldNotes { get; set; } = new List<MemoryNote>();

    protected override void OnInitialized()
    {
        this.MemoryNote = this.MemoryChartService.LoadMemoryNote(this.Difficulty, this.MemoryNoteId);
        this.MemoryNoteCopy = this.MemoryNote.Copy();

        this.SelectedNoteType = this.MemoryNote.MemoryNoteType.ToString();
        
        this.MemoryNoteCopyChanged();
    }

    private async Task SaveMemoryNote()
    {
        this.MemoryChartService.SaveMemoryNote(this.Difficulty, ref this.MemoryNote, this.MemoryNoteCopy);

        await this.ModalInstance.CloseAsync(ModalResult.Ok<MemoryNote>(this.MemoryNote));
    }

    private async Task DeleteMemoryNote()
    {
        this.MemoryChartService.RemoveMemoryNote(this.Difficulty, this.MemoryNoteId);

        await this.ModalInstance.CloseAsync(ModalResult.Ok("Deleted"));
    }

    private void SelectedNoteTypeChanged(string selectNoteType)
    {
        this.SelectedNoteType = selectNoteType;

        var modelType = Enum.Parse<MemoryNoteType>(selectNoteType);

        this.MemoryNoteCopyChanged();

        this.MemoryNoteCopy.MemoryNoteType = modelType;
    }

    private void SelectedSwipeDirectionChanged(string selectSwipeDirection)
    {
        this.SelectedSwipeDirection = selectSwipeDirection;

        var swipeDirection = Enum.Parse<SwipeType>(selectSwipeDirection);

        this.MemoryNoteCopy.SwipeDirection = swipeDirection;
    }

    private void MemoryNoteCopyChanged()
    {
        if (this.SelectedNoteType == "HoldStart")
            this.EndHoldNotes = this.MemoryChartService.GetMemoryNotes(this.Difficulty).Where(x => x.MemoryNoteType == MemoryNoteType.HoldEnd).Where(x => x.HitTime > this.MemoryNoteCopy.HitTime).ToList();
        else if (this.SelectedNoteType == "HoldEnd")
            this.StartHoldNotes = this.MemoryChartService.GetMemoryNotes(this.Difficulty).Where(x => x.MemoryNoteType == MemoryNoteType.HoldStart).Where(x => x.HitTime < this.MemoryNoteCopy.HitTime).ToList();
    }
}